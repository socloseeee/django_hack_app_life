# Generated by Django 4.2 on 2023-04-18 21:19

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codename', models.CharField(max_length=100)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.BooleanField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.BooleanField()),
                ('is_active', models.BooleanField()),
                ('date_joined', models.DateTimeField()),
                ('first_name', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
                ('action_time', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Userdata',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('index', models.IntegerField(blank=True, null=True)),
                ('ues_arm_field', models.TextField(blank=True, db_column='UES (ARM)', null=True)),
                ('ltts', models.TextField(blank=True, db_column='LTTs', null=True)),
                ('nomer_zajavki', models.IntegerField(blank=True, db_column='Nomer zajavki', null=True)),
                ('nomer_paketnoj_zajavki_mpz', models.FloatField(blank=True, db_column='Nomer paketnoj zajavki MPZ', null=True)),
                ('vneshnij_istochnik_zajavki', models.FloatField(blank=True, db_column='Vneshnij istochnik zajavki', null=True)),
                ('nomer_zajavki_iz_vneshnego_istochnika', models.FloatField(blank=True, db_column='Nomer zajavki iz vneshnego istochnika', null=True)),
                ('klient_field', models.TextField(blank=True, db_column='Klient*', null=True)),
                ('inn', models.FloatField(blank=True, db_column='INN', null=True)),
                ('nls', models.FloatField(blank=True, db_column='NLS', null=True)),
                ('region', models.TextField(blank=True, db_column='Region', null=True)),
                ('indeks', models.FloatField(blank=True, db_column='Indeks', null=True)),
                ('administrativnyj_rajon', models.TextField(blank=True, db_column='Administrativnyj rajon', null=True)),
                ('naselennyj_punkt', models.TextField(blank=True, db_column='Naselennyj punkt', null=True)),
                ('ulitsa', models.TextField(blank=True, db_column='Ulitsa', null=True)),
                ('dom', models.TextField(blank=True, db_column='Dom', null=True)),
                ('korpus', models.TextField(blank=True, db_column='Korpus', null=True)),
                ('kvartira', models.FloatField(blank=True, db_column='Kvartira', null=True)),
                ('adres_ustrojstva', models.TextField(blank=True, db_column='Adres ustrojstva', null=True)),
                ('status', models.TextField(blank=True, db_column='Status', null=True)),
                ('data_vhoda_zajavki_v_status', models.TextField(blank=True, db_column='Data vhoda zajavki v status', null=True)),
                ('zadacha_po_zajavke', models.TextField(blank=True, db_column='Zadacha po zajavke', null=True)),
                ('usluga', models.TextField(blank=True, db_column='Usluga', null=True)),
                ('kolichestvo_uslug', models.FloatField(blank=True, db_column='Kolichestvo uslug', null=True)),
                ('dop_kanal_prodazh', models.FloatField(blank=True, db_column='Dop. kanal prodazh', null=True)),
                ('tabel_nyj_nomer', models.FloatField(blank=True, db_column="Tabel'nyj nomer", null=True)),
                ('naznachenie', models.TextField(blank=True, db_column='Naznachenie', null=True)),
                ('kanal_prodazh', models.TextField(blank=True, db_column='Kanal prodazh', null=True)),
                ('segment', models.TextField(blank=True, db_column='Segment', null=True)),
                ('gts_sts', models.TextField(blank=True, db_column='GTS/STS', null=True)),
                ('data_obraschenija', models.TextField(blank=True, db_column='Data obraschenija', null=True)),
                ('data_registratsii_zajavki', models.TextField(blank=True, db_column='Data registratsii zajavki', null=True)),
                ('data_registratsii_pod_zajavki', models.TextField(blank=True, db_column='Data registratsii pod zajavki', null=True)),
                ('reg_narjada_na_tvp', models.TextField(blank=True, db_column='Reg. narjada na TVP', null=True)),
                ('zavershena_vruchnuju', models.TextField(blank=True, db_column='Zavershena vruchnuju', null=True)),
                ('prichina_otkaza_klienta', models.TextField(blank=True, db_column='Prichina otkaza klienta', null=True)),
                ('operator_zavershivshij_zajavku', models.FloatField(blank=True, db_column='Operator zavershivshij zajavku', null=True)),
                ('data_otklonenija_pod_zajavki', models.TextField(blank=True, db_column='Data otklonenija pod zajavki', null=True)),
                ('otklonena', models.TextField(blank=True, db_column='Otklonena', null=True)),
                ('tip_proverki_tvp', models.TextField(blank=True, db_column='Tip proverki TVP', null=True)),
                ('nalichie_tvp', models.TextField(blank=True, db_column='Nalichie TVP', null=True)),
                ('zavershenie_proverki_tvp', models.TextField(blank=True, db_column='Zavershenie proverki TVP', null=True)),
                ('dlit_proverki_tvp', models.TimeField(blank=True, db_column='Dlit. proverki TVP', null=True)),
                ('norm_srok_proverki_tvp_chas_field', models.FloatField(blank=True, db_column='Norm. srok proverki TVP (chas)', null=True)),
                ('prevyshenie_norm_sroka_proverki_tvp', models.TimeField(blank=True, db_column='Prevyshenie norm. sroka proverki TVP', null=True)),
                ('tehnologija', models.TextField(blank=True, db_column='Tehnologija', null=True)),
                ('sozdanie_dogovora', models.TextField(blank=True, db_column='Sozdanie dogovora', null=True)),
                ('data_registratsii_narjada_na_naznachenie_td', models.TextField(blank=True, db_column='Data registratsii narjada na naznachenie TD', null=True)),
                ('naznachenie_td', models.TextField(blank=True, db_column='Naznachenie TD', null=True)),
                ('tip_naznachenija_td', models.TextField(blank=True, db_column='Tip Naznachenija TD', null=True)),
                ('dlit_naznachenija_td', models.TimeField(blank=True, db_column='Dlit. naznachenija TD', null=True)),
                ('norm_srok_naznachenija_td_chas_field', models.FloatField(blank=True, db_column='Norm. srok naznachenija TD (chas)', null=True)),
                ('prevyshenie_norm_sroka_naznachenija_td', models.TextField(blank=True, db_column='Prevyshenie norm. sroka naznachenija TD', null=True)),
                ('data_soglasovanija_vremeni_vyezda_installjatora_pervaja_field', models.TextField(blank=True, db_column='Data soglasovanija vremeni vyezda installjatora (pervaja)', null=True)),
                ('soglasovannaja_data_podkl_pervaja_field', models.TextField(blank=True, db_column='Soglasovannaja data podkl. (pervaja)', null=True)),
                ('soglasovannaja_data_podkl_field', models.TextField(blank=True, db_column='Soglasovannaja data podkl.', null=True)),
                ('zakrytie_narjada_na_podkl_field', models.TextField(blank=True, db_column='Zakrytie narjada na podkl.', null=True)),
                ('norm_srok_podkl_dni_field', models.FloatField(blank=True, db_column='Norm. srok podkl. (dni)', null=True)),
                ('prevyshenie_norm_sroka_podkl', models.TextField(blank=True, db_column='Prevyshenie norm. sroka podkl', null=True)),
                ('prevyshenie_norm_sroka_podkl_dni_field', models.TextField(blank=True, db_column='Prevyshenie norm. sroka podkl.  (dni)', null=True)),
                ('data_vypolnenija_agentom', models.TextField(blank=True, db_column='Data vypolnenija agentom', null=True)),
                ('data_peredachi_agentu', models.TextField(blank=True, db_column='Data peredachi agentu', null=True)),
                ('instaljator', models.FloatField(blank=True, db_column='Instaljator', null=True)),
                ('agent_installjator', models.FloatField(blank=True, db_column='Agent-installjator', null=True)),
                ('dlit_podkljuchenija_ot_reg_zajavki_v_is_field', models.TextField(blank=True, db_column='Dlit. podkljuchenija (ot reg. zajavki v IS)', null=True)),
                ('dlit_podkljuchenija_ot_reg_zajavki_v_is_dni_field', models.TextField(blank=True, db_column='Dlit. podkljuchenija (ot reg. zajavki v IS) (dni)', null=True)),
                ('kol_vo_perenosov_srokov', models.IntegerField(blank=True, db_column='Kol-vo perenosov srokov', null=True)),
                ('opisanie_prichiny_perenosa_srokov', models.TextField(blank=True, db_column='Opisanie prichiny perenosa srokov', null=True)),
                ('prichina_perenosa_srokov', models.TextField(blank=True, db_column='Prichina perenosa srokov', null=True)),
                ('annulirovan_pri_nalichii_tvp', models.TextField(blank=True, db_column='Annulirovan pri nalichii TVP', null=True)),
                ('vysvobozhdenie_nazn_td', models.TextField(blank=True, db_column='Vysvobozhdenie nazn. TD', null=True)),
                ('dlitel_nost_rezervir_td', models.TextField(blank=True, db_column="Dlitel'nost' rezervir TD", null=True)),
                ('data_nachala_dejstvija_dogovora_kurs', models.TextField(blank=True, db_column='Data nachala dejstvija dogovora KURS', null=True)),
                ('sertifikat_ota', models.FloatField(blank=True, db_column='Sertifikat OTA', null=True)),
                ('sertifikat_ota_aktivirovan', models.FloatField(blank=True, db_column='Sertifikat OTA aktivirovan', null=True)),
                ('sertifikat_ota_otklonen', models.FloatField(blank=True, db_column='Sertifikat OTA otklonen', null=True)),
                ('sertifikat_internet', models.FloatField(blank=True, db_column='Sertifikat Internet', null=True)),
                ('sertifikat_internet_aktivirovan', models.FloatField(blank=True, db_column='Sertifikat Internet aktivirovan', null=True)),
                ('sertifikat_internet_otklonen', models.FloatField(blank=True, db_column='Sertifikat Internet otklonen', null=True)),
                ('sertifikat_iptv', models.FloatField(blank=True, db_column='Sertifikat IPTV', null=True)),
                ('sertifikat_iptv_aktivirovan', models.FloatField(blank=True, db_column='Sertifikat IPTV aktivirovan', null=True)),
                ('sertifikat_iptv_otklonen', models.FloatField(blank=True, db_column='Sertifikat IPTV otklonen', null=True)),
                ('kommentarij_tvp_ota', models.TextField(blank=True, db_column='Kommentarij TVP OTA', null=True)),
                ('kommentarij_tvp_shpd', models.FloatField(blank=True, db_column='Kommentarij TVP ShPD', null=True)),
                ('operator_zavodivshij_zajavku', models.FloatField(blank=True, db_column='Operator zavodivshij zajavku', null=True)),
                ('kategorija_uslugi_pk', models.TextField(blank=True, db_column='Kategorija uslugi PK', null=True)),
                ('internet', models.TextField(blank=True, db_column='Internet', null=True)),
                ('ip_tv', models.TextField(blank=True, db_column='IP-TV', null=True)),
                ('ota', models.TextField(blank=True, db_column='OTA', null=True)),
                ('prjamoj_provod', models.TextField(blank=True, db_column='Prjamoj provod', null=True)),
                ('fly', models.TextField(blank=True, db_column='Fly', null=True)),
                ('mvno', models.TextField(blank=True, db_column='MVNO', null=True)),
                ('kolichestvo_sim_kart', models.FloatField(blank=True, db_column='Kolichestvo SIM-kart', null=True)),
                ('nachalo_zadachi_dop_to', models.TextField(blank=True, db_column='Nachalo zadachi Dop. TO', null=True)),
                ('okonchanie_zadachi_dop_to', models.TextField(blank=True, db_column='Okonchanie zadachi Dop. TO', null=True)),
                ('l_s_onima', models.FloatField(blank=True, db_column='L/S Onima', null=True)),
                ('prichiny_otsutstvija_tvp', models.TextField(blank=True, db_column='Prichiny otsutstvija TVP', null=True)),
                ('prichiny_otsutstvija_tvp_iptv_field', models.FloatField(blank=True, db_column='Prichiny otsutstvija TVP (IPTV)', null=True)),
                ('id_dogovor_kurs', models.FloatField(blank=True, db_column='ID Dogovor KURS', null=True)),
                ('nomer_dogovora_kurs', models.FloatField(blank=True, db_column='Nomer dogovora KURS', null=True)),
                ('dlitel_nost_dop_to_dnej_field', models.TextField(blank=True, db_column="Dlitel'nost' Dop. TO (dnej)", null=True)),
                ('norm_srok_dop_to_dnej_field', models.FloatField(blank=True, db_column='Norm.srok Dop. TO (dnej)', null=True)),
                ('narjad_kurs', models.FloatField(blank=True, db_column='Narjad KURS', null=True)),
                ('data_zakrytija_narjada_kurs', models.TextField(blank=True, db_column='Data zakrytija narjada KURS', null=True)),
                ('narjad_iptv_kurs', models.FloatField(blank=True, db_column='Narjad IPTV KURS', null=True)),
                ('data_otkrytija_narjada_kurs', models.TextField(blank=True, db_column='Data otkrytija narjada KURS', null=True)),
                ('data_zakrytija_narjada_iptv_kurs', models.TextField(blank=True, db_column='Data zakrytija narjada IPTV KURS', null=True)),
                ('nomer_ota_shpd', models.TextField(blank=True, db_column='Nomer OTA ShPD', null=True)),
                ('data_otkrytija_narjada_iptv_kurs', models.TextField(blank=True, db_column='Data otkrytija narjada IPTV KURS', null=True)),
                ('primechanie', models.FloatField(blank=True, db_column='Primechanie', null=True)),
                ('kontaktnyj_telefon', models.FloatField(blank=True, db_column='Kontaktnyj telefon', null=True)),
                ('kontaktnoe_litso', models.FloatField(blank=True, db_column='Kontaktnoe litso', null=True)),
                ('fiz_litso', models.TextField(blank=True, db_column='Fiz. litso', null=True)),
                ('jur_litso', models.TextField(blank=True, db_column='Jur. litso', null=True)),
                ('zakrytie_narjada_installjatorom', models.TextField(blank=True, db_column='Zakrytie narjada installjatorom', null=True)),
                ('zadachi_vr_net_tvp', models.TextField(blank=True, db_column='zadachi vr.net TVP', null=True)),
                ('vip_klient', models.TextField(blank=True, db_column='VIP-klient', null=True)),
                ('stoimost_tp_shpd_field', models.FloatField(blank=True, db_column="Stoimost' TP (ShPD)", null=True)),
                ('stoimost_tp_iptv_field', models.FloatField(blank=True, db_column="Stoimost' TP (IPTV)", null=True)),
                ('fio_sotrudnika_sozdavshego_dogovor', models.FloatField(blank=True, db_column='FIO sotrudnika, sozdavshego dogovor', null=True)),
                ('tarifnyj_plan_iptv', models.FloatField(blank=True, db_column='Tarifnyj plan IPTV', null=True)),
                ('nomer_karty_dostupa', models.FloatField(blank=True, db_column='Nomer karty dostupa', null=True)),
                ('nomer_karty_dostupa_iptv', models.FloatField(blank=True, db_column='Nomer karty dostupa IPTV', null=True)),
                ('tarifnyj_plan', models.FloatField(blank=True, db_column='Tarifnyj plan', null=True)),
                ('data_privjazki_karty_v_onyma_shpd_field', models.TextField(blank=True, db_column='Data privjazki karty v Onyma (ShPD)', null=True)),
                ('data_privjazki_karty_v_onyma_iptv_field', models.TextField(blank=True, db_column='Data privjazki karty v Onyma (IPTV)', null=True)),
                ('data_aktivatsii_uslugi_v_onyma_shpd_field', models.TextField(blank=True, db_column='Data aktivatsii uslugi v Onyma (ShPD)', null=True)),
                ('data_aktivatsii_uslugi_v_onyma_iptv_field', models.TextField(blank=True, db_column='Data aktivatsii uslugi v Onyma (IPTV)', null=True)),
                ('srok_zavershenija_ustanovki_wfm_field', models.TextField(blank=True, db_column='Srok zavershenija ustanovki (WFM)', null=True)),
                ('uchastok_wfm_field', models.TextField(blank=True, db_column='Uchastok (WFM)', null=True)),
                ('sozdano_sotrudnikom_rrs', models.TextField(blank=True, db_column='Sozdano sotrudnikom RRS', null=True)),
                ('tspo', models.FloatField(blank=True, db_column='TsPO', null=True)),
                ('uslugi', models.FloatField(blank=True, db_column='Uslugi', null=True)),
                ('promo_aktsii', models.FloatField(blank=True, db_column='Promo-aktsii', null=True)),
                ('tip_klienta_dlja_osv', models.TextField(blank=True, db_column='Tip klienta dlja OSV', null=True)),
                ('kanal_postuplenija_zajavki', models.TextField(blank=True, db_column='Kanal postuplenija zajavki', null=True)),
                ('nomer_zakaza_cms', models.TextField(blank=True, db_column='Nomer zakaza CMS', null=True)),
                ('primechanie_pri_otkl_field', models.TextField(blank=True, db_column='Primechanie pri otkl.', null=True)),
                ('germes_aptv', models.TextField(blank=True, db_column='Germes APTV', null=True)),
                ('zajavka_arm_2_0', models.TextField(blank=True, db_column='Zajavka ARM 2.0', null=True)),
                ('klientskij_sus', models.FloatField(blank=True, db_column='klientskij SUS', null=True)),
                ('stroitel_nyj_sus', models.FloatField(blank=True, db_column="stroitel'nyj SUS", null=True)),
                ('etap_sus', models.FloatField(blank=True, db_column='Etap SUS', null=True)),
                ('migratsija_jul', models.TextField(blank=True, db_column='Migratsija JuL', null=True)),
                ('proekt_sus_germes', models.FloatField(blank=True, db_column='Proekt SUS Germes', null=True)),
                ('ferrari', models.TextField(blank=True, db_column='Ferrari', null=True)),
                ('ferrari_bz', models.TextField(blank=True, db_column='Ferrari BZ', null=True)),
                ('data_otpravki_na_aptv', models.TextField(blank=True, db_column='Data otpravki na APTV', null=True)),
                ('data_okonchanija_aptv_planiruemaja', models.TextField(blank=True, db_column='Data okonchanija APTV planiruemaja', null=True)),
                ('data_okonchanija_aptv_fakticheskaja', models.TextField(blank=True, db_column='Data okonchanija APTV fakticheskaja', null=True)),
                ('dlitel_nost_etapa_aptv', models.TextField(blank=True, db_column="Dlitel'nost' etapa APTV", null=True)),
                ('data_otpravki_na_do', models.TextField(blank=True, db_column='Data otpravki na DO', null=True)),
                ('data_okonchanija_do_planiruemaja', models.TextField(blank=True, db_column='Data okonchanija DO planiruemaja', null=True)),
                ('data_okonchanija_do_fakticheskaja', models.TextField(blank=True, db_column='Data okonchanija DO fakticheskaja', null=True)),
                ('dlitel_nost_etapa_do', models.TextField(blank=True, db_column="Dlitel'nost' etapa DO", null=True)),
                ('bronirovanie_cherez_germes', models.TextField(blank=True, db_column='Bronirovanie cherez Germes', null=True)),
                ('bronirovanie_cherez_argus_ruchnoe_field', models.TextField(blank=True, db_column='Bronirovanie cherez Argus (ruchnoe)', null=True)),
                ('svetofor_germes_aptv', models.TextField(blank=True, db_column='Svetofor Germes APTV', null=True)),
                ('gid_doma_orpon', models.FloatField(blank=True, db_column='GID doma ORPON', null=True)),
                ('paketnoe_reshenie', models.TextField(blank=True, db_column='Paketnoe reshenie', null=True)),
                ('marker_paketa', models.TextField(blank=True, db_column='Marker paketa', null=True)),
                ('dop_usluga_1', models.TextField(blank=True, db_column='Dop.usluga 1', null=True)),
                ('dop_usluga_2', models.FloatField(blank=True, db_column='Dop.usluga 2', null=True)),
                ('dop_usluga_3', models.FloatField(blank=True, db_column='Dop.usluga 3', null=True)),
                ('zajavka_cherez_epk', models.TextField(blank=True, db_column='Zajavka cherez EPK', null=True)),
                ('novyj_klient', models.TextField(blank=True, db_column='Novyj klient', null=True)),
                ('date', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'Userdata',
                'managed': False,
            },
        ),
    ]
